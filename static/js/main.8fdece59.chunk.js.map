{"version":3,"sources":["MyLayout.js","MyRoutes.js","App.js","serviceWorker.js","theme.js","index.js"],"names":["style","root","flexGrow","MyLayout","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","classes","makeStyles","react_default","a","createElement","className","AppBar","position","color","Toolbar","Typography","variant","React","Component","MyTimestamp","lazy","Promise","all","__webpack_require__","e","then","bind","MyBase64Image","MyFileSharer","MyFileReceiver","MyNotFound","Routes","react_router_dom","basename","process","react","fallback","react_router","exact","path","component","App","MyLayout_MyLayout","MyRoutes","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","contrastText","secondary","error","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","src_App","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iQAMMA,EAAQ,CACVC,KAAM,CACFC,SAAU,IAIGC,cACjB,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACVH,0EAKN,IAAMO,EAAUC,YAAWZ,GAE3B,OACIa,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,EAAQV,MACpBY,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC5BN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAbcC,IAAMC,2BCItCC,EAAcC,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,aACzBC,EAAgBP,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAC3BE,EAAeR,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAC1BG,EAAiBT,eAAK,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,aAC5BI,EAAaV,eAAK,kBAAMG,EAAAC,EAAA,IAAAC,KAAAF,EAAAG,KAAA,aAkBfK,EAhBA,kBACXxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAeC,SAAUC,YACrB3B,EAAAC,EAAAC,cAAC0B,EAAA,SAAD,CAAUC,SAAU7B,EAAAC,EAAAC,cAAA,0BAEhBF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACI9B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjCZ,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,eAAeC,UAAWb,IAC5CpB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWZ,IAC3CrB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,kBAAkBC,UAAWX,IAC/CtB,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOG,UAAWV,QCdnBW,mLAVX,OACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,cANU1B,IAAMC,WCQJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ECISC,EAnBDC,YAAe,CACzBC,QAAQ,CACJC,QAAQ,CACJC,KAAM,UACNC,aAAc,QAElBC,UAAW,CACPF,KAAK,UACLC,aAAc,QAElBE,MAAM,CACFH,KAAMI,IAAIC,MAEdC,WAAW,CACPC,QAAS,WCRrBC,IAASC,OACLvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAed,MAAOA,GAClB1C,EAAAC,EAAAC,cAACuD,EAAA,EAAD,MACAzD,EAAAC,EAAAC,cAACwD,EAAD,OAGJC,SAASC,cAAc,UFkHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.8fdece59.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst style = {\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}\r\n\r\nexport default class MyLayout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        const classes = makeStyles(style);\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" color=\"primary\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\">\r\n                            Tools\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","//import loadable from '@loadable/component';\r\nimport React, {Suspense, lazy} from 'react';\r\nimport {BrowserRouter, Route, Switch, HashRouter} from 'react-router-dom';\r\n\r\n// import MyTimestamp from './MyTimestamp';\r\n// import MyBase64Image from './MyBase64Image';\r\n// import MyFileSharer from './MyFileSharer';\r\n\r\n// const MyTimestamp = asyncComponent(() => import('./MyTimestamp'));\r\n// const MyBase64Image = asyncComponent(() => import('./MyBase64Image'));\r\n// const MyFileSharer = asyncComponent(() => import('./MyFileSharer'));\r\n\r\n// const MyTimestamp = loadable(() => import('./MyTimestamp'));\r\n// const MyBase64Image = loadable(() => import('./MyBase64Image'));\r\n// const MyFileSharer = loadable(() => import('./MyFileSharer'));\r\n\r\nconst MyTimestamp = lazy(() => import('./components/MyTimestamp'));\r\nconst MyBase64Image = lazy(() => import('./components/MyBase64Image'));\r\nconst MyFileSharer = lazy(() => import('./components/MyFileSharer'));\r\nconst MyFileReceiver = lazy(() => import('./components/MyFileReceiver'));\r\nconst MyNotFound = lazy(() => import('./components/MyNotFound'));\r\n\r\nconst Routes = () => (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n\r\n            <Switch>\r\n                <Route exact path='/' component={MyTimestamp}></Route>\r\n                <Route exact path='/base64image' component={MyBase64Image}></Route>\r\n                <Route exact path='/filesharer' component={MyFileSharer}></Route>\r\n                <Route exact path='/filesharer/:id' component={MyFileReceiver}></Route>\r\n                <Route component={MyNotFound}></Route>\r\n            </Switch>\r\n\r\n        </Suspense>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Routes;","import React from 'react';\nimport MyLayout from './MyLayout';\nimport MyRoutes from './MyRoutes';\n\nclass App extends React.Component{\n\n  render(){\n    return (\n      <div>\n        <MyLayout></MyLayout>\n        <MyRoutes></MyRoutes>\n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {red} from '@material-ui/core/colors';\r\nimport {createMuiTheme} from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette:{\r\n        primary:{\r\n            main: '#3f51b5',\r\n            contrastText: '#fff',\r\n        },\r\n        secondary: {\r\n            main:'#ff9800',\r\n            contrastText: '#000',\r\n        },\r\n        error:{\r\n            main: red.A400,\r\n        },\r\n        background:{\r\n            default: '#fff',\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {ThemeProvider} from '@material-ui/styles';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App></App>\n    </ThemeProvider>,\n\n    document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}