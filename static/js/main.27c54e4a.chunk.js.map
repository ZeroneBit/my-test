{"version":3,"sources":["MyLayout.js","MyTimestamp.js","App.js","serviceWorker.js","theme.js","index.js"],"names":["style","root","flexGrow","MyLayout","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","classes","makeStyles","react_default","a","createElement","className","AppBar","position","color","Toolbar","Typography","variant","React","Component","MyTimeStamp","_this","state","time","Moment","utc","inputIndex","ticks","event","value","target","millisecondsSinceEpoch","MediaStreamAudioDestinationNode","console","error","date","setState","unixS","unixMS","unix","valueOf","TextField","id","textField","label","placeholder","fullWidth","onChange","unixSChanged","bind","convertToUnixS","unixMsChanged","convertToUnixMs","ticksChanged","convertToTicks","material_ui_pickers_esm","utils","MomentUti","inputVariant","timeChanged","ampm","autoOk","format","withStyles","theme","margin","spacing","width","display","typography","withTheme","App","MyLayout_MyLayout","MyTimestamp","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","main","contrastText","secondary","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","src_App","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27c54e4a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst style = {\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n}\r\n\r\nexport default class MyLayout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        const classes = makeStyles(style);\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\" color=\"primary\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\">\r\n                            Tools\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUti from '@date-io/moment';\r\nimport Moment from 'moment';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nclass MyTimeStamp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            time: Moment.utc(),\r\n            inputIndex: -1,\r\n        };\r\n\r\n        this.ticks = 0;\r\n    }\r\n\r\n    ticksChanged(event) {\r\n        let value = event.target.value;\r\n\r\n        this.ticks = value;\r\n\r\n        let epochTicks = 621355968000000000;\r\n        let ticksPerMillisecond = 10000;\r\n        let maxDateMilliseconds = 8640000000000000;\r\n\r\n        let ticksSinceEpoch = value - epochTicks;\r\n        let millisecondsSinceEpoch = ticksSinceEpoch / ticksPerMillisecond;\r\n        if (millisecondsSinceEpoch > MediaStreamAudioDestinationNode) {\r\n            console.error(\"Invalid number\");\r\n        }\r\n\r\n        var date = Moment(millisecondsSinceEpoch).utc();;\r\n\r\n        this.setState({ time: date, inputIndex: 2 });\r\n    }\r\n\r\n    unixSChanged(event) {\r\n        let unixS = event.target.value;\r\n        let time = Moment(unixS * 1000).utc();\r\n\r\n        this.setState({ time: time, inputIndex: 0 });\r\n    }\r\n\r\n    unixMsChanged(event) {\r\n        let unixMS = event.target.value;\r\n        let time = Moment(unixMS * 1).utc();\r\n\r\n        this.setState({ time: time, inputIndex: 1 });\r\n    }\r\n\r\n    timeChanged(event) {\r\n        this.setState({ time: event, inputIndex: 3 });\r\n    }\r\n\r\n    convertToUnixS(time) {\r\n        let unixS = Moment(time).unix();\r\n        return unixS;\r\n    }\r\n    convertToUnixMs(time) {\r\n        let unixMs = Moment(time).valueOf();\r\n        return unixMs;\r\n    }\r\n    convertToTicks(time) {\r\n        if(this.state.inputIndex == 2){\r\n            return this.ticks;\r\n        }\r\n        const epochTicks = 621355968000000000;\r\n        const ticksPerMillisecond = 10000;\r\n\r\n        let unixMs = Moment(time).valueOf();\r\n        let ticks = (unixMs * ticksPerMillisecond) + epochTicks;\r\n\r\n        return ticks;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <TextField\r\n                    id=\"unix-s-textarea\"\r\n                    className={classes.textField}\r\n                    label=\"Unix Time (s)\"\r\n                    placeholder=\"Unix Time (s)\"\r\n                    color=\"primary\"\r\n                    variant=\"standard\"\r\n                    fullWidth\r\n                    onChange={this.unixSChanged.bind(this)}\r\n                    value={this.convertToUnixS(this.state.time)}\r\n                >\r\n                </TextField>\r\n\r\n                <TextField\r\n                    id=\"unix-ms-textarea\"\r\n                    className={classes.textField}\r\n                    label=\"Unix Time (ms)\"\r\n                    placeholder=\"Unix Time (ms)\"\r\n                    color=\"primary\"\r\n                    variant=\"standard\"\r\n                    fullWidth\r\n                    onChange={this.unixMsChanged.bind(this)}\r\n                    value={this.convertToUnixMs(this.state.time)}\r\n                >\r\n                </TextField>\r\n\r\n                <TextField\r\n                    id='ticks-textarea'\r\n                    className={classes.textField}\r\n                    label=\"Time Ticks\"\r\n                    placeholder=\"Ticks\"\r\n                    color=\"primary\"\r\n                    variant=\"standard\"\r\n                    fullWidth\r\n                    onChange={this.ticksChanged.bind(this)}\r\n                    value={this.convertToTicks(this.state.time)}\r\n                >\r\n                </TextField>\r\n\r\n                <MuiPickersUtilsProvider utils={MomentUti}>\r\n                    <DateTimePicker\r\n                        inputVariant=\"standard\"\r\n                        label=\"UTC Time\"\r\n                        className={classes.textField}\r\n                        placeholder=\"UTC Time\"\r\n                        color=\"primary\"\r\n                        onChange={this.timeChanged.bind(this)}\r\n                        value={this.state.time}\r\n\r\n                        ampm={false}\r\n                        autoOk={true}\r\n                        format=\"YYYY-MM-DD T HH:mm:ss.SSS Z\"\r\n                        fullWidth\r\n\r\n                    >\r\n                    </DateTimePicker>\r\n                </MuiPickersUtilsProvider>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    textField: {\r\n        margin: theme.spacing(2),\r\n        width: 400,\r\n        display: \"block\",\r\n    },\r\n\r\n    typography: {\r\n        display: \"inline-block\",\r\n    },\r\n});\r\n\r\nexport default withStyles(styles, { withTheme: true })(MyTimeStamp);\r\n\r\n","import React from 'react';\nimport MyLayout from './MyLayout';\nimport MyTimestamp from './MyTimestamp';\n\nclass App extends React.Component{\n\n  render(){\n    const {classes} = this.props;\n\n    return (\n      <div>\n        <MyLayout></MyLayout>\n        <MyTimestamp></MyTimestamp>\n      </div>\n    );\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {red} from '@material-ui/core/colors';\r\nimport {createMuiTheme} from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette:{\r\n        primary:{\r\n            main: '#3f51b5',\r\n            contrastText: '#fff',\r\n        },\r\n        secondary: {\r\n            main:'#ff9800',\r\n            contrastText: '#000',\r\n        },\r\n        error:{\r\n            main: red.A400,\r\n        },\r\n        background:{\r\n            default: '#fff',\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {ThemeProvider} from '@material-ui/styles';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App></App>\n    </ThemeProvider>,\n\n    document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}