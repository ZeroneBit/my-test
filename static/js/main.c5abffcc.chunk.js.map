{"version":3,"sources":["ProTip.js","App.js","serviceWorker.js","theme.js","index.js"],"names":["LightBulbIcon","props","react_default","a","createElement","SvgIcon","d","useStyles","makeStyles","theme","root","margin","spacing","lightBulb","verticalAlign","marginRight","ProTip","classes","Typography","className","color","Link","href","MadeWithLove","variant","align","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","main","secondary","error","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","Container","maxWidth","Box","my","component","gutterBottom","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAMA,SAASA,EAAcC,GACrB,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAYJ,EACXC,EAAAC,EAAAC,cAAA,QAAME,EAAE,wSAKd,IAAMC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,OAAQF,EAAMG,QAAQ,EAAG,EAAG,IAE9BC,UAAW,CACTC,cAAe,SACfC,YAAaN,EAAMG,QAAQ,OAIhB,SAASI,IACtB,IAAMC,EAAUV,IAChB,OACEL,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAYC,UAAWF,EAAQP,KAAMU,MAAM,iBACzClB,EAAAC,EAAAC,cAACJ,EAAD,CAAemB,UAAWF,EAAQJ,YADpC,oBAEoB,IAClBX,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,KAAK,iEAAX,wBAEQ,IALV,qCCpBJ,SAASC,IACP,OACErB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAYM,QAAQ,QAAQJ,MAAM,gBAAgBK,MAAM,UACrD,0BACDvB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMD,MAAM,UAAUE,KAAK,4BAA3B,eAGC,UCFaI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ECESrB,EAjBDsB,YAAe,CACzBC,QAAQ,CACJC,QAAQ,CACJC,KAAM,WAEVC,UAAW,CACPD,KAAK,WAETE,MAAM,CACFF,KAAMG,IAAIC,MAEdC,WAAW,CACPC,QAAS,WCNrBC,IAASC,OACLxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAelC,MAAOA,GAClBP,EAAAC,EAAAC,cAACwC,EAAA,EAAD,MACA1C,EAAAC,EAAAC,cHOO,WACb,OACEF,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAWC,SAAS,MAClB5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAKC,GAAI,GACP9C,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAYM,QAAQ,KAAKyB,UAAU,KAAKC,cAAY,GAApD,oCAGAhD,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACmB,EAAD,SGfA,OAGJ4B,SAASC,cAAc,UFkHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c5abffcc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Link from '@material-ui/core/Link';\r\nimport SvgIcon from '@material-ui/core/SvgIcon';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nfunction LightBulbIcon(props) {\r\n  return (\r\n    <SvgIcon {...props}>\r\n      <path d=\"M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6C7.8 12.16 7 10.63 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z\" />\r\n    </SvgIcon>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    margin: theme.spacing(6, 0, 3),\r\n  },\r\n  lightBulb: {\r\n    verticalAlign: 'middle',\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nexport default function ProTip() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Typography className={classes.root} color=\"textSecondary\">\r\n      <LightBulbIcon className={classes.lightBulb} />\r\n      Pro tip: See more{' '}\r\n      <Link href=\"https://material-ui.com/getting-started/page-layout-examples/\">\r\n        page layout examples\r\n      </Link>{' '}\r\n      on the Material-UI documentation.\r\n    </Typography>\r\n  );\r\n}","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport ProTip from './ProTip';\n\nfunction MadeWithLove() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Built with love by the '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Material-UI\n      </Link>\n      {' team.'}\n    </Typography>\n  );\n}\n\nexport default function App() {\n  return (\n    <Container maxWidth=\"sm\">\n      <Box my={4}>\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n          Create React App v4-beta example\n        </Typography>\n        <ProTip />\n        <MadeWithLove />\n      </Box>\n    </Container>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {red} from '@material-ui/core/colors';\r\nimport {createMuiTheme} from '@material-ui/core/styles';\r\n\r\nconst theme = createMuiTheme({\r\n    palette:{\r\n        primary:{\r\n            main: '#556cd6',\r\n        },\r\n        secondary: {\r\n            main:'#19857b',\r\n        },\r\n        error:{\r\n            main: red.A400,\r\n        },\r\n        background:{\r\n            default: '#fff',\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {ThemeProvider} from '@material-ui/styles';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\n\n//ReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <CssBaseline ></CssBaseline>\n        <App></App>\n    </ThemeProvider>,\n\n    document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}